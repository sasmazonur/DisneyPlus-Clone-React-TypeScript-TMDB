/**
 * @fileoverview Defines TypeScript interfaces for the application.
 * 
 * @copyright 2024 Onur Sasmaz
 * 
 * @license Educational Use License
 * 
 * Permission is granted to use, modify, and distribute this project for educational purposes only.
 * Commercial use is strictly prohibited. For commercial use, please contact the author.
 * 
 * @module Types
 * 
 * @description This file contains TypeScript interfaces representing movies, TV shows, seasons, and episodes.
 */

// Interface representing a movie.
export interface Movie {
  id: number; // Unique identifier for the movie
  title: string; // Title of the movie
  overview: string; // Short summary of the movie
  backdrop_path: string; // Path to the backdrop image
  poster_path: string; // Path to the poster image
  release_date: string; // Release date of the movie
  vote_average: number; // Average vote rating for the movie
  genres: { id: number; name: string }[]; // Array of genres associated with the movie
  runtime: number; // Runtime of the movie in minutes
  production_companies: { id: number; name: string }[]; // Array of production companies involved in making the movie
}

// Interface representing a TV show.
export interface TVShow {
  id: number; // Unique identifier for the TV show
  name: string; // Name of the TV show
  overview: string; // Short summary of the TV show
  backdrop_path: string; // Path to the backdrop image
  poster_path: string; // Path to the poster image
  first_air_date: string; // First air date of the TV show
  vote_average: number; // Average vote rating for the TV show
  genres: { id: number; name: string }[]; // Array of genres associated with the TV show
  number_of_seasons: number; // Total number of seasons in the TV show
  number_of_episodes: number; // Total number of episodes in the TV show
  seasons: Season[]; // Array of seasons in the TV show
  production_companies: { id: number; name: string }[]; // Array of production companies involved in making the TV show
}

// Interface representing a season of a TV show.
export interface Season {
  id: number; // Unique identifier for the season
  season_number: number; // Number of the season
  name: string; // Name of the season
  episodes: Episode[]; // Array of episodes in the season
}

// Interface representing an episode of a TV show.
export interface Episode {
  id: number; // Unique identifier for the episode
  name: string; // Name of the episode
  overview: string; // Short summary of the episode
  still_path: string; // Path to the still image
  air_date: string; // Air date of the episode
  vote_average: number; // Average vote rating for the episode
  episode_number: number; // Number of the episode within the season
  runtime: number; // Runtime of the episode in minutes
}

// Interface representing a content item (either a movie or a TV show)
export interface ContentItem {
  id: number;
  title?: string; // Title for movie
  name?: string; // Name for TV show
  poster_path: string;
}

// Interface for search results from useSearch.ts
export interface SearchResult {
  results: ContentItem[];
}

// Interface for fetch results from useFetch.ts
export interface FetchResult<T> {
  data: T | null; // The fetched data of generic type T
  loading: boolean; // Indicates if the fetch operation is in progress
  error: Error | null; // Error object if an error occurred, otherwise null
}

// Interface for useMovieDetails.ts
export interface MovieDetails extends Movie {
  budget: number; // Budget of the movie
  revenue: number; // Revenue generated by the movie
  status: string; // Status of the movie (e.g., Released)
  tagline: string; // Tagline of the movie
}

// Interface for useTVShowDetails.ts
export interface TVShowDetails extends TVShow {
  created_by: { id: number; name: string }[]; // Array of creators of the TV show
  last_air_date: string; // Last air date of the TV show
  next_episode_to_air: Episode | null; // Details of the next episode to air, if available
}

// Interface for ContentSlider.tsx
export interface ContentSliderProps {
  title: string;
  items: { id: number, title: string, image: string }[];
}

export interface CardProps {
  title: string;
  image: string;
}

export interface UserContextType {
  user: string | null;
  setUser: (user: string | null) => void;
}
